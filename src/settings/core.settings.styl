// =============================================================================
// CORE
// =============================================================================

// Most important setup variables. They underpin a lot of how the framework
// functions and should be modified with caution.



// 1. Base Unit is a root number and a lot of things are dependent on it to keep
//    UI solid, consistent and meaningful. It can be the size of your body text
//    (set in `font.settings.import.styl`), line height, typeface x-height, etc.
//    By default it equals to 16px, but you are free to choose the size at which
//    your body text typeface looks best. Set this value in pixels and it will
//    be automatically converted to rems.
//
// 2. Base Ratio is multiplied by the Base Unit to produce a scale of numbers
//    (see `Modular Scale` below) that are proportionally related. Ratio should
//    be chosen carefully and meaningfully, drawing inspiration from the history
//    and character of a typeface or other elements in a project. More info:
//
//      — 8thlight.com/blog/billy-whited/2011/10/28/r-a-ela-tional-design.html;
//      — blog.typekit.com/2014/02/26/deriving-layout-from-your-typeface;
//      — 24ways.org/2011/composing-the-new-canon.

$base-unit  = 16px // [1]
$base-ratio = $perfect-fourth // [2]





// Modular Scale
// =============================================================================

// Modular Scale is determined based on Base Unit and Base Ratio (defined
// above), but you're willing to make your own Modular Scale system: add one or
// more ratios/bases (therefore you will receive more numbers to your scale),
// multiply instead of raising to a power, or use another set of coefficients,
// e.g.:
//
//   - from 0 to 1:       0.125 0.25 0.5 0.75 1;
//   — from 1 to 2:       1 1.125 1.25 1.5 1.75;
//   — Fibonacci numbers: 1 2 5 8 13.

$multipliers = 1 2 3 4 5
$unit        = unit($base-unit / 10, 'rem')

$unit-lg     = round($unit * ($base-ratio ** $multipliers[0]), 1)
$unit-xl     = round($unit * ($base-ratio ** $multipliers[1]), 1)
$unit-2x     = round($unit * ($base-ratio ** $multipliers[2]), 1)
$unit-3x     = round($unit * ($base-ratio ** $multipliers[3]), 1)
$unit-4x     = round($unit * ($base-ratio ** $multipliers[4]), 1)

$unit-sm     = round($unit / ($base-ratio ** $multipliers[0]), 1)
$unit-xs     = round($unit / ($base-ratio ** $multipliers[1]), 1)
$unit-2s     = round($unit / ($base-ratio ** $multipliers[2]), 1)
$unit-3s     = round($unit / ($base-ratio ** $multipliers[3]), 1)
$unit-4s     = round($unit / ($base-ratio ** $multipliers[4]), 1)