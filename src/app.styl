/*
 * Breeze.css
 *
 * Framework that inspires on writing better CSS
 * By @antonskyba
 * github.com/antonskyba/Breeze.css
 */





/* Contents
 * ========================================================================== */

/*
 * SETTINGS
 * Config...............Project-level configuration and feature switches.
 * Ratio................Ratios that can be used to produce spacing values.
 * Core.................Most important setup variables, such as Base Unit and
 *                      Base Ratio.
 * Breakpoint...........Breakpoints at which layout changes adapting to
 *                      different screen sizes.
 * Palette..............Material Design color palette.
 * Color................Project's color assignments.
 * Font.................Font declarations & settings.
 * Animation............Custom animation timing functions, ported from Axis.
 * Other................Miscellaneous project-wide variables.
 *
 * TOOLS
 * Button...............Buttons tools.
 * Form.................Form tools.
 * Type.................Type tools.
 *
 * GENERIC
 * Box-sizing...........Slightly better box-sizing practice.
 * Normalize............Normalize.css from Necolas.
 * Reset................Simple reset that complements Normalize.css.
 * Shared...............Shared declarations for certain elements.
 *
 * ELEMENTS
 * Page.................Base styles for page-level elements.
 * Type.................Default styles for text elements: headings, link, etc.
 * Button...............Default button styles.
 * Form.................Base form styles (for <input>, <textarea>, etc).
 * Image................Base image styles.
 * Table................Base table styles.
 *
 * OBJECTS
 * Block................Simple block object with consistent bottom gap.
 * Grid.................Grid module.
 * Wrapper..............Page constraint object.
 * Table................Simple object for manipulating the structure of <table>.
 *
 * COMPONENTS
 * Button...............An example button component, and how it fits into the
 *                      Breeze framework.
 *
 * HELPERS
 * Accessibility........Helper classes that control content's accessibility.
 * Box-model............Utility classes to put box-model values onto elements.
 * Flexbox..............Helper classes to set and control Flexbox container.
 * Type.................Text & font helper classes.
 * Print................Print styles that optimize the printing process and make
 *                      the printed pages easier to read.
 * Debug................Styles to make debugging easier.
 */





$css-path = '/' 

// Settings
// =============================================================================
   
// Global settings files that contain project-wide variables; things that need
// to be made available to the entire codebase.

@import $css-path + 'settings/_config.settings'
@import $css-path + 'settings/_ratio.settings'
@import $css-path + 'settings/_core.settings'
@import $css-path + 'settings/_breakpoint.settings'
@import $css-path + 'settings/_palette.settings'
@import $css-path + 'settings/_color.settings'
@import $css-path + 'settings/_font.settings'
@import $css-path + 'settings/_animation.settings'
@import $css-path + 'settings/_other.settings'





// Tools
// =============================================================================

// Globally used mixins and functions. Additional libs can be imported and
// initialized there.

@import $css-path + 'tools/_button.tools'
@import $css-path + 'tools/_form.tools'
@import $css-path + 'tools/_type.tools'





/* Generic
 * ========================================================================== */

/*   
 * Low-specific & far-reaching rulesets: reset, normalize, box-sizing
 * definition, etc. This is the first layer which generates actual CSS.   
 */

@import $css-path + 'generic/_box-sizing.generic'
@import $css-path + 'generic/_normalize.generic'
@import $css-path + 'generic/_reset.generic'
@import $css-path + 'generic/_shared.generic'





/* Elements
 * ========================================================================== */

/*
 * Styles for unclassed HTML elements (e.g. <h1>, <input>). These come with
 * default styling from the browser so we can redefine them there.
 */

@import $css-path + 'elements/_page.elements'
@import $css-path + 'elements/_type.elements'
@import $css-path + 'elements/_button.elements'
@import $css-path + 'elements/_form.elements'
@import $css-path + 'elements/_image.elements'
@import $css-path + 'elements/_table.elements'





/* Object
 * ========================================================================== */

/*
 * Class-based selectors which define objects, abstractions, and design 
 * patterns. 
 */

@import $css-path + 'objects/_block.objects'
@import $css-path + 'objects/_grid.objects'
@import $css-path + 'objects/_wrapper.objects'
@import $css-path + 'objects/_table.objects'





/* Components
 * ========================================================================== */

/*
 * Discrete, complete chunks of UI. This is where majority of designed
 * components/chunks of UI are injected.
 */

@import $css-path + 'components/_example.button.components'





/* Helpers
 * ========================================================================== */

/*
 * Utilities and helper classes with ability to override anything which goes
 * before.
 */

@import $css-path + 'helpers/_accessibility.helpers'
@import $css-path + 'helpers/_box-model.helpers'
@import $css-path + 'helpers/_flexbox.helpers'
@import $css-path + 'helpers/_type.helpers'
@import $css-path + 'helpers/_print.helpers'
@import $css-path + 'helpers/_debug.helpers'