/* ==========================================================================
   ACCESSIBILITY
   ========================================================================== */

/*
 * Helper classes that control content's accessibility.
 */



// A mixin for building accessibility classes. You can run it without arguments,
// or optionally pass it suffix for responsive classes. E.g. to create
// classes for a small breakpoint:
//
//   visibilities('-mobile')

visibilities($breakpoint-name = null)

  // Hide an element and remove it from the layout flow.
    
  .h-hidden{$breakpoint-name}
    display none !important
    

  // Hide an element but leave it in the layout flow.
    
  .h-invisible{$breakpoint-name}
    visibility hidden !important


/*
 * Automatically generate accessibility helper classes:
 *
 *   .h-hidden
 *   .h-invisible
 */
 
visibilities()


/*
 * If we have breakpoints defined (at `breakpoint.settings.styl`), generate
 * accessibility classes for each of them and give them a responsive suffix,
 * e.g.:
 *
 *   .h-hidden-desktop
 *   .h-invisible-mobile
 */

if $breakpoints
  
  for $breakpoint-name, $breakpoint-value in $breakpoints
    
    +at($breakpoint-name)
    
      visibilities($breakpoint-separator + $breakpoint-name)


/*
 * Generate `display` shorthand classes, like:
 *
 *   .h-block
 *   .h-inline
 *   .h-inline-block
 */

for $display-value in block inline inline-block
  
  .h-{$display-value}
    display $display-value !important


/*
 * Make element hidden and opaque â€” used to create show/hide transitions.
 */

.h-transparent
  visibility hidden !important
  opacity 0 !important